<?php
/**
 * ClientInformation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Corbado\Generated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Corbado Backend API
 *
 * # Introduction This documentation gives an overview of all Corbado Backend API calls to implement passwordless authentication with Passkeys.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@corbado.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Corbado\Generated\Model;

use \ArrayAccess;
use \Corbado\Generated\ObjectSerializer;

/**
 * ClientInformation Class Doc Comment
 *
 * @category Class
 * @package  Corbado\Generated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ClientInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'clientInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'remote_address' => 'string',
        'user_agent' => 'string',
        'client_env_handle' => 'string',
        'javascript_fingerprint' => 'string',
        'java_script_high_entropy' => '\Corbado\Generated\Model\JavaScriptHighEntropy',
        'bluetooth_available' => 'bool',
        'password_manager_available' => 'bool',
        'user_verifying_platform_authenticator_available' => 'bool',
        'conditional_mediation_available' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'remote_address' => null,
        'user_agent' => null,
        'client_env_handle' => null,
        'javascript_fingerprint' => null,
        'java_script_high_entropy' => null,
        'bluetooth_available' => null,
        'password_manager_available' => null,
        'user_verifying_platform_authenticator_available' => null,
        'conditional_mediation_available' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'remote_address' => false,
        'user_agent' => false,
        'client_env_handle' => false,
        'javascript_fingerprint' => false,
        'java_script_high_entropy' => false,
        'bluetooth_available' => false,
        'password_manager_available' => false,
        'user_verifying_platform_authenticator_available' => false,
        'conditional_mediation_available' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'remote_address' => 'remoteAddress',
        'user_agent' => 'userAgent',
        'client_env_handle' => 'clientEnvHandle',
        'javascript_fingerprint' => 'javascriptFingerprint',
        'java_script_high_entropy' => 'javaScriptHighEntropy',
        'bluetooth_available' => 'bluetoothAvailable',
        'password_manager_available' => 'passwordManagerAvailable',
        'user_verifying_platform_authenticator_available' => 'userVerifyingPlatformAuthenticatorAvailable',
        'conditional_mediation_available' => 'conditionalMediationAvailable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'remote_address' => 'setRemoteAddress',
        'user_agent' => 'setUserAgent',
        'client_env_handle' => 'setClientEnvHandle',
        'javascript_fingerprint' => 'setJavascriptFingerprint',
        'java_script_high_entropy' => 'setJavaScriptHighEntropy',
        'bluetooth_available' => 'setBluetoothAvailable',
        'password_manager_available' => 'setPasswordManagerAvailable',
        'user_verifying_platform_authenticator_available' => 'setUserVerifyingPlatformAuthenticatorAvailable',
        'conditional_mediation_available' => 'setConditionalMediationAvailable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'remote_address' => 'getRemoteAddress',
        'user_agent' => 'getUserAgent',
        'client_env_handle' => 'getClientEnvHandle',
        'javascript_fingerprint' => 'getJavascriptFingerprint',
        'java_script_high_entropy' => 'getJavaScriptHighEntropy',
        'bluetooth_available' => 'getBluetoothAvailable',
        'password_manager_available' => 'getPasswordManagerAvailable',
        'user_verifying_platform_authenticator_available' => 'getUserVerifyingPlatformAuthenticatorAvailable',
        'conditional_mediation_available' => 'getConditionalMediationAvailable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('remote_address', $data ?? [], null);
        $this->setIfExists('user_agent', $data ?? [], null);
        $this->setIfExists('client_env_handle', $data ?? [], null);
        $this->setIfExists('javascript_fingerprint', $data ?? [], null);
        $this->setIfExists('java_script_high_entropy', $data ?? [], null);
        $this->setIfExists('bluetooth_available', $data ?? [], null);
        $this->setIfExists('password_manager_available', $data ?? [], null);
        $this->setIfExists('user_verifying_platform_authenticator_available', $data ?? [], null);
        $this->setIfExists('conditional_mediation_available', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['remote_address'] === null) {
            $invalidProperties[] = "'remote_address' can't be null";
        }
        if ($this->container['user_agent'] === null) {
            $invalidProperties[] = "'user_agent' can't be null";
        }
        if ($this->container['user_verifying_platform_authenticator_available'] === null) {
            $invalidProperties[] = "'user_verifying_platform_authenticator_available' can't be null";
        }
        if ($this->container['conditional_mediation_available'] === null) {
            $invalidProperties[] = "'conditional_mediation_available' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets remote_address
     *
     * @return string
     */
    public function getRemoteAddress()
    {
        return $this->container['remote_address'];
    }

    /**
     * Sets remote_address
     *
     * @param string $remote_address Client's IP address
     *
     * @return self
     */
    public function setRemoteAddress($remote_address)
    {
        if (is_null($remote_address)) {
            throw new \InvalidArgumentException('non-nullable remote_address cannot be null');
        }
        $this->container['remote_address'] = $remote_address;

        return $this;
    }

    /**
     * Gets user_agent
     *
     * @return string
     */
    public function getUserAgent()
    {
        return $this->container['user_agent'];
    }

    /**
     * Sets user_agent
     *
     * @param string $user_agent Client's user agent
     *
     * @return self
     */
    public function setUserAgent($user_agent)
    {
        if (is_null($user_agent)) {
            throw new \InvalidArgumentException('non-nullable user_agent cannot be null');
        }
        $this->container['user_agent'] = $user_agent;

        return $this;
    }

    /**
     * Gets client_env_handle
     *
     * @return string|null
     */
    public function getClientEnvHandle()
    {
        return $this->container['client_env_handle'];
    }

    /**
     * Sets client_env_handle
     *
     * @param string|null $client_env_handle Client's environment handle
     *
     * @return self
     */
    public function setClientEnvHandle($client_env_handle)
    {
        if (is_null($client_env_handle)) {
            throw new \InvalidArgumentException('non-nullable client_env_handle cannot be null');
        }
        $this->container['client_env_handle'] = $client_env_handle;

        return $this;
    }

    /**
     * Gets javascript_fingerprint
     *
     * @return string|null
     */
    public function getJavascriptFingerprint()
    {
        return $this->container['javascript_fingerprint'];
    }

    /**
     * Sets javascript_fingerprint
     *
     * @param string|null $javascript_fingerprint Client's fingerprint
     *
     * @return self
     */
    public function setJavascriptFingerprint($javascript_fingerprint)
    {
        if (is_null($javascript_fingerprint)) {
            throw new \InvalidArgumentException('non-nullable javascript_fingerprint cannot be null');
        }
        $this->container['javascript_fingerprint'] = $javascript_fingerprint;

        return $this;
    }

    /**
     * Gets java_script_high_entropy
     *
     * @return \Corbado\Generated\Model\JavaScriptHighEntropy|null
     */
    public function getJavaScriptHighEntropy()
    {
        return $this->container['java_script_high_entropy'];
    }

    /**
     * Sets java_script_high_entropy
     *
     * @param \Corbado\Generated\Model\JavaScriptHighEntropy|null $java_script_high_entropy java_script_high_entropy
     *
     * @return self
     */
    public function setJavaScriptHighEntropy($java_script_high_entropy)
    {
        if (is_null($java_script_high_entropy)) {
            throw new \InvalidArgumentException('non-nullable java_script_high_entropy cannot be null');
        }
        $this->container['java_script_high_entropy'] = $java_script_high_entropy;

        return $this;
    }

    /**
     * Gets bluetooth_available
     *
     * @return bool|null
     */
    public function getBluetoothAvailable()
    {
        return $this->container['bluetooth_available'];
    }

    /**
     * Sets bluetooth_available
     *
     * @param bool|null $bluetooth_available Client's Bluetooth availability
     *
     * @return self
     */
    public function setBluetoothAvailable($bluetooth_available)
    {
        if (is_null($bluetooth_available)) {
            throw new \InvalidArgumentException('non-nullable bluetooth_available cannot be null');
        }
        $this->container['bluetooth_available'] = $bluetooth_available;

        return $this;
    }

    /**
     * Gets password_manager_available
     *
     * @return bool|null
     */
    public function getPasswordManagerAvailable()
    {
        return $this->container['password_manager_available'];
    }

    /**
     * Sets password_manager_available
     *
     * @param bool|null $password_manager_available Client's password manager availability
     *
     * @return self
     */
    public function setPasswordManagerAvailable($password_manager_available)
    {
        if (is_null($password_manager_available)) {
            throw new \InvalidArgumentException('non-nullable password_manager_available cannot be null');
        }
        $this->container['password_manager_available'] = $password_manager_available;

        return $this;
    }

    /**
     * Gets user_verifying_platform_authenticator_available
     *
     * @return bool
     */
    public function getUserVerifyingPlatformAuthenticatorAvailable()
    {
        return $this->container['user_verifying_platform_authenticator_available'];
    }

    /**
     * Sets user_verifying_platform_authenticator_available
     *
     * @param bool $user_verifying_platform_authenticator_available user_verifying_platform_authenticator_available
     *
     * @return self
     */
    public function setUserVerifyingPlatformAuthenticatorAvailable($user_verifying_platform_authenticator_available)
    {
        if (is_null($user_verifying_platform_authenticator_available)) {
            throw new \InvalidArgumentException('non-nullable user_verifying_platform_authenticator_available cannot be null');
        }
        $this->container['user_verifying_platform_authenticator_available'] = $user_verifying_platform_authenticator_available;

        return $this;
    }

    /**
     * Gets conditional_mediation_available
     *
     * @return bool
     */
    public function getConditionalMediationAvailable()
    {
        return $this->container['conditional_mediation_available'];
    }

    /**
     * Sets conditional_mediation_available
     *
     * @param bool $conditional_mediation_available conditional_mediation_available
     *
     * @return self
     */
    public function setConditionalMediationAvailable($conditional_mediation_available)
    {
        if (is_null($conditional_mediation_available)) {
            throw new \InvalidArgumentException('non-nullable conditional_mediation_available cannot be null');
        }
        $this->container['conditional_mediation_available'] = $conditional_mediation_available;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


